import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, \
    ContextTypes, Application
from handlers.menu import set_bot_commands
from reminders import reminder_job, handle_vote
from db import register_user, get_remaining_trainings, get_participants_for_today
from config import TOKEN, CHAT_ID
from datetime import time

user_states = {}

# Enable logging
logging.basicConfig(
    format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s", level = logging.ERROR
)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update, context):
    telegram_id = update.message.from_user.id
    user_states[telegram_id] = "awaiting_name"
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


async def handle_text(update, context):
    telegram_id = update.message.from_user.id
    text = update.message.text

    if user_states.get(telegram_id) == "awaiting_name":
        name = text
        already_registered = register_user(telegram_id, name)
        user_states.pop(telegram_id)

        if already_registered:
            await update.message.reply_text(f"{name}, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text(f"{name}, —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")


async def trainings_command(update, context):
    telegram_id = update.message.from_user.id
    remaining = get_remaining_trainings(telegram_id)
    name = update.message.from_user.first_name

    if remaining is None:
        await update.message.reply_text(f"{name}, —É —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞.")
    else:
        await update.message.reply_text(f"{name}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")


# –ö–Ω–æ–ø–∫–∏ –∏–∑ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
async def button_handler(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "join_training":
        await query.edit_message_text("üöÄ –ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!")
    elif query.data == "view_participants":
        await query.edit_message_text("üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: (–ø–æ–∫–∞ –ø—É—Å—Ç–æ)")
    elif query.data == "about_bot":
        await query.edit_message_text("ü§ñ –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! –ü–æ–º–æ–≥–∞—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ —É—á–∞—Å—Ç–∏–µ–º –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–Ω—è—Ç–∏—è—Ö.")

async def test_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await reminder_job(context)

async def participants_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    participants = get_participants_for_today()
    if participants:
        names_text = "\n".join(f"‚Ä¢ {name}" for name in participants)
        await update.message.reply_text(f"üìã –°–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–∞–ª–∏—Å—å:\n{names_text}")
    else:
        await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram
    async def post_init(app):
        await set_bot_commands(app.bot)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("trainings", trainings_command))
    application.add_handler(CallbackQueryHandler(handle_vote))  # –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    application.add_handler(CallbackQueryHandler(button_handler))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CommandHandler("test_reminder", test_reminder))
    job_queue = application.job_queue
    # –ó–∞–¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 12:00 –≤ –Ω—É–∂–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–≤—Ç, —á—Ç, –ø—Ç)
    reminder_time = time(hour=12, minute=0)
    application.add_handler(CommandHandler("participants_today", participants_today))
    application.post_init = post_init
    application.run_polling(allowed_updates=Update.ALL_TYPES)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω—ã–µ –¥–Ω–∏
    job_queue.run_daily(reminder_job, reminder_time, days=(1, 3, 5), chat_id=CHAT_ID)  # 1: –í—Ç–æ—Ä–Ω–∏–∫, 3: –ß–µ—Ç–≤–µ—Ä–≥, 5: –ü—è—Ç–Ω–∏—Ü–∞

if __name__ == "__main__":
    main()
